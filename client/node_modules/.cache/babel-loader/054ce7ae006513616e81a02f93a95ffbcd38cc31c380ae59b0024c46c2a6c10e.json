{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\PROJECTS\\\\THINKSPACE\\\\client\\\\src\\\\components\\\\MindMap.js\";\nimport React from 'react';\nimport ReactFlow, { Background } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  nodes\n}) => {\n  // Convert backend response to React Flow nodes and edges\n  const flowNodes = nodes.map((n, index) => ({\n    id: n.id,\n    data: {\n      label: `${n.label} (${n.pos})`\n    },\n    position: {\n      x: 100 + index * 120,\n      y: 100 + index % 5 * 50\n    }\n  }));\n  const edges = nodes.filter(n => n.head !== n.id && n.head !== undefined).map(n => ({\n    id: `e${n.id}-${n.head}`,\n    source: n.id,\n    target: n.head,\n    label: n.dep\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '600px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: flowNodes,\n      edges: edges,\n      fitView: true,\n      children: /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","ReactFlow","Background","jsxDEV","_jsxDEV","MindMap","nodes","flowNodes","map","n","index","id","data","label","pos","position","x","y","edges","filter","head","undefined","source","target","dep","style","height","width","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN STACK/PROJECTS/THINKSPACE/client/src/components/MindMap.js"],"sourcesContent":["import React from 'react';\r\nimport ReactFlow, { Background } from 'react-flow-renderer';\r\n\r\nconst MindMap = ({ nodes }) => {\r\n  // Convert backend response to React Flow nodes and edges\r\n  const flowNodes = nodes.map((n, index) => ({\r\n    id: n.id,\r\n    data: { label: `${n.label} (${n.pos})` },\r\n    position: { x: 100 + index * 120, y: 100 + (index % 5) * 50 }\r\n  }));\r\n\r\n  const edges = nodes\r\n    .filter((n) => n.head !== n.id && n.head !== undefined)\r\n    .map((n) => ({\r\n      id: `e${n.id}-${n.head}`,\r\n      source: n.id,\r\n      target: n.head,\r\n      label: n.dep\r\n    }));\r\n\r\n  return (\r\n    <div style={{ height: '600px', width: '100%' }}>\r\n      <ReactFlow nodes={flowNodes} edges={edges} fitView>\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MindMap;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IAAIC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC7B;EACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,MAAM;IACzCC,EAAE,EAAEF,CAAC,CAACE,EAAE;IACRC,IAAI,EAAE;MAAEC,KAAK,EAAE,GAAGJ,CAAC,CAACI,KAAK,KAAKJ,CAAC,CAACK,GAAG;IAAI,CAAC;IACxCC,QAAQ,EAAE;MAAEC,CAAC,EAAE,GAAG,GAAGN,KAAK,GAAG,GAAG;MAAEO,CAAC,EAAE,GAAG,GAAIP,KAAK,GAAG,CAAC,GAAI;IAAG;EAC9D,CAAC,CAAC,CAAC;EAEH,MAAMQ,KAAK,GAAGZ,KAAK,CAChBa,MAAM,CAAEV,CAAC,IAAKA,CAAC,CAACW,IAAI,KAAKX,CAAC,CAACE,EAAE,IAAIF,CAAC,CAACW,IAAI,KAAKC,SAAS,CAAC,CACtDb,GAAG,CAAEC,CAAC,KAAM;IACXE,EAAE,EAAE,IAAIF,CAAC,CAACE,EAAE,IAAIF,CAAC,CAACW,IAAI,EAAE;IACxBE,MAAM,EAAEb,CAAC,CAACE,EAAE;IACZY,MAAM,EAAEd,CAAC,CAACW,IAAI;IACdP,KAAK,EAAEJ,CAAC,CAACe;EACX,CAAC,CAAC,CAAC;EAEL,oBACEpB,OAAA;IAAKqB,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eAC7CxB,OAAA,CAACH,SAAS;MAACK,KAAK,EAAEC,SAAU;MAACW,KAAK,EAAEA,KAAM;MAACW,OAAO;MAAAD,QAAA,eAChDxB,OAAA,CAACF,UAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAACC,EAAA,GAxBI7B,OAAO;AA0Bb,eAAeA,OAAO;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\PROJECTS\\\\THINKSPACE\\\\client\\\\src\\\\components\\\\MindMap.js\";\nimport React from 'react';\nimport ReactFlow, { Background, Controls } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MindMap = ({\n  nodes\n}) => {\n  if (!nodes || nodes.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No nodes to display.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 44\n  }, this);\n\n  // Center node\n  const centerNode = {\n    id: 'center',\n    data: {\n      label: 'Mind Map'\n    },\n    position: {\n      x: 250,\n      y: 100\n    },\n    style: {\n      background: '#f8b400',\n      color: '#000',\n      padding: 10\n    }\n  };\n\n  // Keyword nodes around center\n  const keywordNodes = nodes.map((node, index) => ({\n    id: `node-${index}`,\n    data: {\n      label: node.label || node\n    },\n    position: {\n      x: 250 + 200 * Math.cos(2 * Math.PI * index / nodes.length),\n      y: 100 + 200 * Math.sin(2 * Math.PI * index / nodes.length)\n    },\n    style: {\n      background: '#87cefa',\n      padding: 10\n    }\n  }));\n\n  // Edges connecting keywords to center\n  const edges = keywordNodes.map(node => ({\n    id: `edge-${node.id}`,\n    source: 'center',\n    target: node.id\n  }));\n  const elements = [centerNode, ...keywordNodes, ...edges];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '600px',\n      border: '1px solid #ccc'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","ReactFlow","Background","Controls","jsxDEV","_jsxDEV","MindMap","nodes","length","children","fileName","_jsxFileName","lineNumber","columnNumber","centerNode","id","data","label","position","x","y","style","background","color","padding","keywordNodes","map","node","index","Math","cos","PI","sin","edges","source","target","elements","height","border","fitView","_c","$RefreshReg$"],"sources":["D:/MERN STACK/PROJECTS/THINKSPACE/client/src/components/MindMap.js"],"sourcesContent":["import React from 'react';\r\nimport ReactFlow, { Background, Controls } from 'react-flow-renderer';\r\n\r\nconst MindMap = ({ nodes }) => {\r\n  if (!nodes || nodes.length === 0) return <div>No nodes to display.</div>;\r\n\r\n  // Center node\r\n  const centerNode = {\r\n    id: 'center',\r\n    data: { label: 'Mind Map' },\r\n    position: { x: 250, y: 100 },\r\n    style: { background: '#f8b400', color: '#000', padding: 10 },\r\n  };\r\n\r\n  // Keyword nodes around center\r\n  const keywordNodes = nodes.map((node, index) => ({\r\n    id: `node-${index}`,\r\n    data: { label: node.label || node },\r\n    position: {\r\n      x: 250 + 200 * Math.cos((2 * Math.PI * index) / nodes.length),\r\n      y: 100 + 200 * Math.sin((2 * Math.PI * index) / nodes.length),\r\n    },\r\n    style: { background: '#87cefa', padding: 10 },\r\n  }));\r\n\r\n  // Edges connecting keywords to center\r\n  const edges = keywordNodes.map((node) => ({\r\n    id: `edge-${node.id}`,\r\n    source: 'center',\r\n    target: node.id,\r\n  }));\r\n\r\n  const elements = [centerNode, ...keywordNodes, ...edges];\r\n\r\n  return (\r\n    <div style={{ height: '600px', border: '1px solid #ccc' }}>\r\n      <ReactFlow elements={elements} fitView>\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MindMap;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC7B,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE,oBAAOH,OAAA;IAAAI,QAAA,EAAK;EAAoB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAExE;EACA,MAAMC,UAAU,GAAG;IACjBC,EAAE,EAAE,QAAQ;IACZC,IAAI,EAAE;MAAEC,KAAK,EAAE;IAAW,CAAC;IAC3BC,QAAQ,EAAE;MAAEC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE;IAAI,CAAC;IAC5BC,KAAK,EAAE;MAAEC,UAAU,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAG;EAC7D,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGlB,KAAK,CAACmB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;IAC/Cb,EAAE,EAAE,QAAQa,KAAK,EAAE;IACnBZ,IAAI,EAAE;MAAEC,KAAK,EAAEU,IAAI,CAACV,KAAK,IAAIU;IAAK,CAAC;IACnCT,QAAQ,EAAE;MACRC,CAAC,EAAE,GAAG,GAAG,GAAG,GAAGU,IAAI,CAACC,GAAG,CAAE,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAGH,KAAK,GAAIrB,KAAK,CAACC,MAAM,CAAC;MAC7DY,CAAC,EAAE,GAAG,GAAG,GAAG,GAAGS,IAAI,CAACG,GAAG,CAAE,CAAC,GAAGH,IAAI,CAACE,EAAE,GAAGH,KAAK,GAAIrB,KAAK,CAACC,MAAM;IAC9D,CAAC;IACDa,KAAK,EAAE;MAAEC,UAAU,EAAE,SAAS;MAAEE,OAAO,EAAE;IAAG;EAC9C,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMS,KAAK,GAAGR,YAAY,CAACC,GAAG,CAAEC,IAAI,KAAM;IACxCZ,EAAE,EAAE,QAAQY,IAAI,CAACZ,EAAE,EAAE;IACrBmB,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAER,IAAI,CAACZ;EACf,CAAC,CAAC,CAAC;EAEH,MAAMqB,QAAQ,GAAG,CAACtB,UAAU,EAAE,GAAGW,YAAY,EAAE,GAAGQ,KAAK,CAAC;EAExD,oBACE5B,OAAA;IAAKgB,KAAK,EAAE;MAAEgB,MAAM,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAiB,CAAE;IAAA7B,QAAA,eACxDJ,OAAA,CAACJ,SAAS;MAACmC,QAAQ,EAAEA,QAAS;MAACG,OAAO;MAAA9B,QAAA,gBACpCJ,OAAA,CAACH,UAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdR,OAAA,CAACF,QAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAAC2B,EAAA,GAvCIlC,OAAO;AAyCb,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
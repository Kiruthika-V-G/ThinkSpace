{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\PROJECTS\\\\THINKSPACE\\\\client\\\\src\\\\components\\\\MindMap.js\";\nimport React from 'react';\nimport ReactFlow, { Background, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\n\n// Define some colors for clusters\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clusterColors = ['#FF6B6B',\n// red\n'#4ECDC4',\n// teal\n'#FFD93D',\n// yellow\n'#1A535C',\n// blue\n'#FF9F1C',\n// orange\n'#9B5DE5',\n// purple\n'#00BBF9' // cyan\n];\nconst MindMap = ({\n  nodes\n}) => {\n  // Convert NLP nodes into React Flow nodes and edges\n  const reactFlowNodes = nodes.map((node, index) => {\n    var _node$cluster;\n    const cluster = (_node$cluster = node.cluster) !== null && _node$cluster !== void 0 ? _node$cluster : 0;\n    return {\n      id: node.id,\n      data: {\n        label: node.label\n      },\n      position: {\n        x: cluster % 3 * 250 + index % 3 * 50,\n        y: Math.floor(index / 3) * 100\n      },\n      style: {\n        background: clusterColors[cluster % clusterColors.length],\n        color: '#fff',\n        padding: 10,\n        borderRadius: 12,\n        fontWeight: 'bold',\n        border: '2px solid #222'\n      }\n    };\n  });\n  const edges = [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '80vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: reactFlowNodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","ReactFlow","Background","Controls","jsxDEV","_jsxDEV","clusterColors","MindMap","nodes","reactFlowNodes","map","node","index","_node$cluster","cluster","id","data","label","position","x","y","Math","floor","style","background","length","color","padding","borderRadius","fontWeight","border","edges","height","width","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN STACK/PROJECTS/THINKSPACE/client/src/components/MindMap.js"],"sourcesContent":["import React from 'react';\r\nimport ReactFlow, { Background, Controls } from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\n// Define some colors for clusters\r\nconst clusterColors = [\r\n  '#FF6B6B', // red\r\n  '#4ECDC4', // teal\r\n  '#FFD93D', // yellow\r\n  '#1A535C', // blue\r\n  '#FF9F1C', // orange\r\n  '#9B5DE5', // purple\r\n  '#00BBF9', // cyan\r\n];\r\n\r\nconst MindMap = ({ nodes }) => {\r\n  // Convert NLP nodes into React Flow nodes and edges\r\n  const reactFlowNodes = nodes.map((node, index) => {\r\n    const cluster = node.cluster ?? 0;\r\n    return {\r\n      id: node.id,\r\n      data: { label: node.label },\r\n      position: {\r\n        x: (cluster % 3) * 250 + (index % 3) * 50,\r\n        y: Math.floor(index / 3) * 100,\r\n      },\r\n      style: {\r\n        background: clusterColors[cluster % clusterColors.length],\r\n        color: '#fff',\r\n        padding: 10,\r\n        borderRadius: 12,\r\n        fontWeight: 'bold',\r\n        border: '2px solid #222',\r\n      },\r\n    };\r\n  });\r\n\r\n  const edges = [];\r\n\r\n  return (\r\n    <div style={{ height: '80vh', width: '100%' }}>\r\n      <ReactFlow nodes={reactFlowNodes} edges={edges} fitView>\r\n        <Background />\r\n        <Controls />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MindMap;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,WAAW;AAC3D,OAAO,0BAA0B;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG,CACpB,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS,CAAE;AAAA,CACZ;AAED,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC7B;EACA,MAAMC,cAAc,GAAGD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAAA,IAAAC,aAAA;IAChD,MAAMC,OAAO,IAAAD,aAAA,GAAGF,IAAI,CAACG,OAAO,cAAAD,aAAA,cAAAA,aAAA,GAAI,CAAC;IACjC,OAAO;MACLE,EAAE,EAAEJ,IAAI,CAACI,EAAE;MACXC,IAAI,EAAE;QAAEC,KAAK,EAAEN,IAAI,CAACM;MAAM,CAAC;MAC3BC,QAAQ,EAAE;QACRC,CAAC,EAAGL,OAAO,GAAG,CAAC,GAAI,GAAG,GAAIF,KAAK,GAAG,CAAC,GAAI,EAAE;QACzCQ,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACV,KAAK,GAAG,CAAC,CAAC,GAAG;MAC7B,CAAC;MACDW,KAAK,EAAE;QACLC,UAAU,EAAElB,aAAa,CAACQ,OAAO,GAAGR,aAAa,CAACmB,MAAM,CAAC;QACzDC,KAAK,EAAE,MAAM;QACbC,OAAO,EAAE,EAAE;QACXC,YAAY,EAAE,EAAE;QAChBC,UAAU,EAAE,MAAM;QAClBC,MAAM,EAAE;MACV;IACF,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAG,EAAE;EAEhB,oBACE1B,OAAA;IAAKkB,KAAK,EAAE;MAAES,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eAC5C7B,OAAA,CAACJ,SAAS;MAACO,KAAK,EAAEC,cAAe;MAACsB,KAAK,EAAEA,KAAM;MAACI,OAAO;MAAAD,QAAA,gBACrD7B,OAAA,CAACH,UAAU;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdlC,OAAA,CAACF,QAAQ;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV,CAAC;AAACC,EAAA,GAhCIjC,OAAO;AAkCb,eAAeA,OAAO;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN STACK\\\\PROJECTS\\\\THINKSPACE\\\\client\\\\src\\\\components\\\\MindMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, MarkerType } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clusterColors = {\n  Definition: '#ffeaa7',\n  Application: '#fab1a0',\n  Technique: '#a29bfe',\n  default: '#dfe6e9'\n};\nfunction MindMap({\n  data\n}) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const buildGraph = useCallback(() => {\n    const flowNodes = [];\n    const flowEdges = [];\n    for (const cluster of data.nodes) {\n      const color = clusterColors[cluster.label] || clusterColors.default;\n      flowNodes.push({\n        id: cluster.id,\n        data: {\n          label: cluster.label\n        },\n        position: {\n          x: Math.random() * 400,\n          y: Math.random() * 400\n        },\n        style: {\n          padding: 10,\n          backgroundColor: color,\n          borderRadius: '12px',\n          fontWeight: 'bold',\n          border: '2px solid #636e72'\n        }\n      });\n      cluster.children.forEach((child, i) => {\n        const childId = child.id;\n        flowNodes.push({\n          id: childId,\n          data: {\n            label: child.label\n          },\n          position: {\n            x: Math.random() * 400 + 100,\n            y: Math.random() * 400 + 100 + i * 60\n          },\n          style: {\n            padding: 8,\n            backgroundColor: '#fff',\n            border: `2px solid ${color}`,\n            borderRadius: '8px'\n          }\n        });\n        flowEdges.push({\n          id: `${cluster.id}->${childId}`,\n          source: cluster.id,\n          target: childId,\n          animated: true,\n          style: {\n            stroke: '#2d3436'\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: '#2d3436'\n          }\n        });\n      });\n    }\n    if (data.relations) {\n      data.relations.forEach((rel, i) => {\n        flowEdges.push({\n          id: `rel-${i}`,\n          source: rel.source,\n          target: rel.target,\n          label: rel.relation,\n          labelBgPadding: [4, 2],\n          labelBgBorderRadius: 4,\n          labelBgStyle: {\n            fill: '#fff',\n            color: '#2d3436',\n            fontWeight: 'bold'\n          },\n          animated: true,\n          style: {\n            stroke: '#0984e3'\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            width: 20,\n            height: 20,\n            color: '#0984e3'\n          }\n        });\n      });\n    }\n    setNodes(flowNodes);\n    setEdges(flowEdges);\n  }, [data]);\n  useEffect(() => {\n    buildGraph();\n  }, [data, buildGraph]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '80vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(MindMap, \"QbYI1P4zjFUWNOnCTpfl4SBd19I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useEffect","useCallback","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","MarkerType","jsxDEV","_jsxDEV","clusterColors","Definition","Application","Technique","default","MindMap","data","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","buildGraph","flowNodes","flowEdges","cluster","color","label","push","id","position","x","Math","random","y","style","padding","backgroundColor","borderRadius","fontWeight","border","children","forEach","child","i","childId","source","target","animated","stroke","markerEnd","type","ArrowClosed","width","height","relations","rel","relation","labelBgPadding","labelBgBorderRadius","labelBgStyle","fill","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN STACK/PROJECTS/THINKSPACE/client/src/components/MindMap.jsx"],"sourcesContent":["import React, { useEffect, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  MiniMap, Controls, Background,\r\n  useNodesState, useEdgesState, MarkerType\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nconst clusterColors = {\r\n  Definition: '#ffeaa7',\r\n  Application: '#fab1a0',\r\n  Technique: '#a29bfe',\r\n  default: '#dfe6e9',\r\n};\r\n\r\nfunction MindMap({ data }) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n  const buildGraph = useCallback(() => {\r\n    const flowNodes = [];\r\n    const flowEdges = [];\r\n\r\n    for (const cluster of data.nodes) {\r\n      const color = clusterColors[cluster.label] || clusterColors.default;\r\n\r\n      flowNodes.push({\r\n        id: cluster.id,\r\n        data: { label: cluster.label },\r\n        position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        style: {\r\n          padding: 10,\r\n          backgroundColor: color,\r\n          borderRadius: '12px',\r\n          fontWeight: 'bold',\r\n          border: '2px solid #636e72',\r\n        }\r\n      });\r\n\r\n      cluster.children.forEach((child, i) => {\r\n        const childId = child.id;\r\n        flowNodes.push({\r\n          id: childId,\r\n          data: { label: child.label },\r\n          position: {\r\n            x: Math.random() * 400 + 100,\r\n            y: Math.random() * 400 + 100 + i * 60\r\n          },\r\n          style: {\r\n            padding: 8,\r\n            backgroundColor: '#fff',\r\n            border: `2px solid ${color}`,\r\n            borderRadius: '8px'\r\n          }\r\n        });\r\n\r\n        flowEdges.push({\r\n          id: `${cluster.id}->${childId}`,\r\n          source: cluster.id,\r\n          target: childId,\r\n          animated: true,\r\n          style: { stroke: '#2d3436' },\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: '#2d3436',\r\n          },\r\n        });\r\n      });\r\n    }\r\n\r\n    if (data.relations) {\r\n      data.relations.forEach((rel, i) => {\r\n        flowEdges.push({\r\n          id: `rel-${i}`,\r\n          source: rel.source,\r\n          target: rel.target,\r\n          label: rel.relation,\r\n          labelBgPadding: [4, 2],\r\n          labelBgBorderRadius: 4,\r\n          labelBgStyle: { fill: '#fff', color: '#2d3436', fontWeight: 'bold' },\r\n          animated: true,\r\n          style: { stroke: '#0984e3' },\r\n          markerEnd: {\r\n            type: MarkerType.ArrowClosed,\r\n            width: 20,\r\n            height: 20,\r\n            color: '#0984e3',\r\n          },\r\n        });\r\n      });\r\n    }\r\n\r\n    setNodes(flowNodes);\r\n    setEdges(flowEdges);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    buildGraph();\r\n  }, [data, buildGraph]);\r\n\r\n  return (\r\n    <div style={{ height: '80vh', width: '100%' }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        fitView\r\n      >\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MindMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}